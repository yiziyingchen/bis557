library(dplyr)
library(ggplot2)
library(dplyr)
data(origins)
data(orings)
library(faraway)
library(tibble)
data(orings)
ggplot(orings, aes(x = temp, y = damange/6)) + geom_point() + theme_minimal() + xlim(30,90) + geom_smooth(method = lm)
ggplot(orings, aes(x = temp, y = damage/6)) + geom_point() + theme_minimal() + xlim(30,90) + geom_smooth(method = lm)
ps<- seq(0.001, 0.999, 0.001)
tibble(p = ps, y = logit(ps)) %>% ggplot(aes(x=p, y=y)) + geom_line()
y<- seq(-6,6, 0.001)
tibble(x=y, y=1-logit(y) %>% ggplot(aes(x=x, y=y)) + geom_line())
tibble(x=y, y=1-lilogit(y) %>% ggplot(aes(x=x, y=y)) + geom_line())
tibble(x=y, y=1-ilogit(y) %>% ggplot(aes(x=x, y=y)) + geom_line())
tibble(p=p, y=1-ilogit(p) %>% ggplot(aes(x=p, y=y)) + geom_line())
tibble(p=p, y=1-ilogit(p)) %>% ggplot(aes(x=p, y=y)) + geom_line())
tibble(p = p, y= 1-ilogit(p)) %>% ggplot(aes(x=p, y=y)) + geom_line()
p<- seq(-6,6, 0.001)
tibble(p = p, y= 1-ilogit(p)) %>% ggplot(aes(x=p, y=y)) + geom_line()
?maxit
library(corrgram)
install.packages("corrgram")
library(corrgram)
help(auto)
mpg<- auto$mpg
library(corrgram)
help(auto)
mpg<- auto$mpg
plot(w.gpm, xlab = "weight", ylab = "gallons per mile", main = 'Gas consumption fo cars')
plot(w,gpm, xlab = "weight", ylab = "gallons per mile", main = 'Gas consumption fo cars')
w <- auto$Weight
plot(w,gpm, xlab = "weight", ylab = "gallons per mile", main = 'Gas consumption fo cars')
plot(w,mpg, xlab = "weight", ylab = "gallons per mile", main = 'Gas consumption fo cars')
fit <- lm(mpg ~ w)
fit <- lm(gpm ~ w)
gpm <- 1/mpg
plot(w,mpg, xlab = "weight", ylab = "gallons per mile", main = 'Gas consumption fo cars')
fit <- lm(gpm ~ w)
gpm <- 1/mpg
fit <- lm(gpm ~ w)
n <- length(mpg)
gpm <- 1/mpg
n
mpg<- auto$mpg
n <- length(mpg)
n
mpg<- auto$mpg
n <- length(mpg)
o<- auto$Origin
levels()o
levels(o)
levels(o) <- c("America", "Europe", "Japan")
plot(w,gpm, xlab = "weight", ylab = "gallons per mile", main = 'Gas consumption fo cars')
mpg<- auto$MPG
n <- length(mpg)
gpm <- 1/mpg
plot(w,gpm, xlab = "weight", ylab = "gallons per mile", main = 'Gas consumption fo cars')
fit <- lm(gpm ~ w)
abline(fit1)
fit1<- lm(gpm ~ w)
abline(fit1)
plot(w,gpm, xlab = "weight", ylab = "gallons per mile", main = 'Gas consumption fo cars')
fit1<- lm(gpm ~ w)
abline(fit1)
summary(fit1)
fit2 <- lm(gpm ~ w+o)
plot(w,gpm, col = as.numeric(o)+1,xlab = "weight", ylab = "gallons per mile", main = 'Gas consumption fo cars')
legend("topleft", legend = levels(o), text.col = 2:4, fill = 2:4)
lasso_reg_with_screening <-
function(X, y, b, lambda)
{
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) / lambda / nrow(X)
# Return a vector indicating where the KKT conditions have
# been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
kernel_epan <-function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
val
}
kern_density <- function(x, x_new, h=1){
X <- cbind(1, x)
sapply(x_new, function(v){
w <- kernel_epan((x - v), h=h)
dens <- w/n
dens
})
}
x = rnorm(100)
x_new = rnorm(100)
kern_density(x, x_new, h=1)
plot(x_new, y)
plot(x_new, dens)
dens <- kern_density(x, x_new, h=1)
plot(y = dens, x = x_new)
dens <- kern_density(x, x_new, h=1)
plot(y = dens, x = x)
length(dens)
x <- rnorm(10000)
x_new <- rnorm(10000)
dens <- kern_density(x, x_new, h=1)
dens <- kern_density(x, x_new, h=1)
plot(y = dens, x = x)
dens <- kern_density(x, x_new, h=1)[100]
x <- rnorm(100)
x_new <- rnorm(100)
dens <- kern_density(x, x_new, h=1)[100]
dens
dens <- kern_density(x, x_new, h=1)[100,]
dens
plot(y = dens, x = x)
kernel_epan <-function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
val
}
kern_density <- function(x, x_new, h=1){
X <- cbind(1, x)
sapply(x_new, function(v){
w <- kernel_epan((x - v), h=h)
dens <- w/n
dens
})
}
x <- rnorm(100)
x_new <- rnorm(100)
dens <- kern_density(x, x_new, h=1)[100,]
plot(y = dens, x = x)
length(dens)
test()
check()
library(dplyr)
test()
check()
getwd()
setwd("/Users/yiziyingchen/Desktop/bis557")
test()
check()
test()
test()
getwd()
library(devtools)
test()
dens <- kern_density(x, x_new, h=2)[100,]
plot(y = dens, x = x)
dens <- kern_density(x, x_new, h=100)[100,]
plot(y = dens, x = x)
dens2 <- kern_density(x, x_new, h=100)[100,]
ploy(y = dens2, x = x )
plot(y = dens2, x = x )
kernel_epan <-function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
val
}
kern_density <- function(x, x_new, h=1){
X <- cbind(1, x)
sapply(x_new, function(v){
w <- kernel_epan((x - v), h=h)
dens <- w/ length(x)
dens
})
}
x <- rnorm(100)
x_new <- rnorm(100)
dens1 <- kern_density(x, x_new, h=10)[100,]
plot(y = dens1, x = x)
dens2 <- kern_density(x, x_new, h=100)[100,]
plot(y = dens2, x = x )
dens1 <- kern_density(x, x_new, h=10)
dens1 <- kern_density(x, x_new, h=10)
plot(y = dens1, x = x)
dens1 <- kern_density(x, x_new, h=10)[100,]
plot(y = dens1, x = x)
dens2 <- kern_density(x, x_new, h=100)[100,]
plot(y = dens2, x = x )
kernel_epan <-function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
val
}
kern_density <- function(x, x_new, h=1){
X <- cbind(1, x)
sapply(x_new, function(v){
w <- kernel_epan((x - v), h=h)
dens <- w/ length(x)
dens
})
}
x <- rnorm(100)
x_new <- rnorm(100)
dens1 <- kern_density(x, x_new, h=10)[100,]
plot(y = dens1, x = x)
dens2 <- kern_density(x, x_new, h=100)[100,]
plot(y = dens2, x = x )
kernel_epan <-function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
val
}
kern_density <- function(x, x_new, h=1){
X <- cbind(1, x)
sapply(x_new, function(v){
w <- kernel_epan((x - v), h=h)
dens <- w/n
dens
})
}
x <- rnorm(100)
x_new <- rnorm(100)
dens1 <- kern_density(x, x_new, h=10)[100,]
plot(y = dens1, x = x)
dens2 <- kern_density(x, x_new, h=100)[100,]
plot(y = dens2, x = x )
dens1 <- kern_density(x, x_new, h=1)[100,]
plot(y = dens1, x = x)
dens2 <- kern_density(x, x_new, h=10)[100,]
plot(y = dens2, x = x )
kernel_epan <-function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
val
}
kern_density <- function(x, x_new, h=1){
X <- cbind(1, x)
sapply(x_new, function(v){
w <- kernel_epan((x - v), h=h)
dens <- w/n
dens
})
}
x <- rnorm(100)
x_new <- rnorm(100)
dens1 <- kern_density(x, x_new, h=1)[100,]
plot(y = dens1, x = x)
dens2 <- kern_density(x, x_new, h=10)[100,]
plot(y = dens2, x = x )
kern_density <- function(x, x_new, h=1){
X <- cbind(1, x)
sapply(x_new, function(v){
w <- kernel_epan((x - v), h=h)
dens <- w/n
dens
})
}
dens1 <- kern_density(x, x_new, h=1)[100,]
dens1 <- kern_density(x, x_new, h=1)
length(dens1)
kern_density <- function(x, x_new, h=1){
X <- cbind(1, x)
sapply(x_new, function(v){
w <- kernel_epan((x_new - v), h=h)
dens <- w/n
dens
})
}
dens1 <- kern_density(x, x_new, h=1)
length(dens1)
kernel_epan <-function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
val
}
kern_density <- function(x, x_new, h=1){
X <- cbind(1, x)
sapply(x_new, function(v){
w <- kernel_epan((x_new - v), h=h)
dens <- w/n
dens
})
}
x <- rnorm(100)
x_new <- rnorm(100)
dens1 <- kern_density(x, x_new, h=1)
length(dens1)
plot(y = dens1, x = x)
kernel_epan <-function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
val
}
kern_density <- function(x, x_new, h=1){
X <- cbind(1, x)
sapply(x_new, function(v){
w <- kernel_epan((x_new - v), h=h)
dens <- w/length(x_new)
dens
})
}
x <- rnorm(100)
x_new <- rnorm(100)
dens1 <- kern_density(x, x_new, h=1)
length(dens1)
plot(y = dens1, x = x)
length(dens1)
n
kernel_epan <-function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
val
}
kern_density <- function(x, x_new, h=1){
X <- cbind(1, x)
sapply(x_new, function(v){
w <- kernel_epan((x_new - v), h=h)
dens <- w/n
dens
})
}
n
x <- rnorm(100)
x_new <- rnorm(100)
dens1 <- kern_density(x, x_new, h=1)
length(dens1)
plot(y = dens1, x = x)
x <- rnorm(100)
x_new <- rnorm(100)
x
x_new
n
kernel_epan <-function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
val
}
kern_density <- function(x, x_new, h=1){
X <- cbind(1, x)
sapply(x_new, function(v){
w <- kernel_epan((x_new - v), h=h)
dens <- w/length(x_new)
dens
})
}
#checking the visual implementation results
x <- rnorm(100)
x_new <- rnorm(100)
dens1 <- kern_density(x, x_new, h=1)[100,]
plot(y = dens1, x = x)
dens2 <- kern_density(x, x_new, h=10)[100,]
plot(y = dens2, x = x )
getwd(0)
getwd()
test()
plot(w,gpm, col = as.numeric(o)+1,xlab = "weight", ylab = "gallons per mile", main = 'Gas consumption fo cars')
legend("topleft", legend = levels(o), text.col = 2:4, fill = 2:4)
fit2 <- lm(gpm ~ w+o)
abline(fit2)
kernel_epan <-function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran * (1/h)
val
}
kern_density <- function(x, x_new, h=1){
X <- cbind(1, x)
sapply(x_new, function(v){
w <- kernel_epan((x - v), h=h)
dens <- sum(w/length(x))
dens
})
}
#checking the visual implementation results
x <- rnorm(100)
x_new <- rnorm(100)
dens1 <- kern_density(x, x_new, h=1)[100,]
dens1 <- kern_density(x, x_new, h=1)
plot(y = dens1, x = x)
dens2 <- kern_density(x, x_new, h=10)
plot(y = dens2, x = x )
plot(y = dens1, x = x)
kernel_epan <-function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran * (1/h)
val
}
kern_density <- function(x, x_new, h=1){
sapply(x_new, function(v){
w <- kernel_epan((x - v), h=h)
dens <- sum(w)/length(x)
dens
})
}
#checking the visual implementation results
x <- rnorm(100)
x_new <- rnorm(100)
dens1 <- kern_density(x, x_new, h=1)
plot(y = dens1, x = x)
kernel_epan <-function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran * (1/h)
return(val)
}
kern_density <- function(x, x_new, h=1){
sapply(x_new, function(v){
w <- kernel_epan((x - v), h=h)
dens <- sum(w)/length(x)
dens
})
}
#checking the visual implementation results
x <- rnorm(100)
x_new <- rnorm(100)
dens1 <- kern_density(x, x_new, h=1)
plot(y = dens1, x = x)
x = rnorm(100)
x
x = rnorm(100,0,1)
x
#calculate Epanechnikov kernel
kernel_epan <-function(x, h=1){
x <- x / h
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran * (1/h)
return(val)
}
# calculate kernel density
# input x is a training vector; x_new is a test set, h is bandwith
# output a kernel density estimation from Epanechnikov kernel
kern_density <- function(x, x_new, h=1){
sapply(x_new, function(v){
w <- kernel_epan((x - v), h=h)
dens <- sum(w)/length(x)
dens
})
}
#checking the visual implementation results
x <- rnorm(100)
x_new <- rnorm(100)
dens1 <- kern_density(x, x_new, h=1)
plot(y = dens1, x = x)
plot(x = dens1, y = x)
plot(y = dens1,  = x)
plot(y = dens1, x = x)
plot(y = dens1, x = x_new)
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1")
abline(rnorm(100))
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1", type = "l")
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE, yaxt="n")
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1")
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE, yaxt="n")
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1")
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE, yaxt="n")
x_new <- rnorm(100)
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1")
x <- rnorm(100)
x_new <- rnorm(100)
dens1 <- kern_density(x, x_new, h=1)
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1")
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE, yaxt="n")
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1", type = 1)
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1", type = 'l')
plot(y = dens1, x = sort(x_new), main = "Kernal density estimation with bandwith = 1", type = "l")
x_new <- sort(rnorm(100))
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1", type = "l")
x <- rnorm(100)
x_new <- sort(rnorm(100))
dens1 <- kern_density(x, x_new, h=1)
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1", type = "l")
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE, yaxt="n")
x <- rnorm(100)
x_new <- sort(rnorm(100))
dens1 <- kern_density(x, x_new, h=1)
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1", type = "l")
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE, yaxt="n")
x <- rnorm(100)
x_new <- sort(rnorm(100))
dens1 <- kern_density(x, x_new, h=1)
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1", type = "l")
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE, yaxt="n")
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1")
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE, yaxt="n")
x <- rnorm(100)
x_new <- sort(rnorm(100))
dens1 <- kern_density(x, x_new, h=1)
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1")
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE, yaxt="n")
x <- rnorm(100)
x_new <- sort(rnorm(100))
dens1 <- kern_density(x, x_new, h=1)
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1")
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE, yaxt="n")
x <- rnorm(100)
x_new <- sort(rnorm(100))
dens1 <- kern_density(x, x_new, h=1)
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1")
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE, yaxt="n")
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1")
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE, yaxt="n", ylim = c(0,1))
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1")
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE, yaxt="n", ylim = c(0,1))
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1", ylim = c(0,1))
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE, yaxt="n")
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1", ylim = c(0,0.5))
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE, yaxt="n")
plot(y = dens1, x = x_new, main = "Kernal density estimation with bandwith = 1", ylim = c(0,0.5))
curve(dnorm(x,0,1), col="darkblue", lwd=2, add=TRUE)
